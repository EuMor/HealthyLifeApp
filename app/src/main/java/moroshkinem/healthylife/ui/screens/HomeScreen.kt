package moroshkinem.healthylife.ui.screens

import androidx.compose.foundation.horizontalScroll
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.DirectionsWalk
import androidx.compose.material.icons.filled.DirectionsWalk
import androidx.compose.material.icons.filled.Hotel
import androidx.compose.material.icons.filled.LocalDrink
import androidx.compose.material.icons.filled.LocalFireDepartment
import androidx.compose.material.icons.filled.LocalPharmacy
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.material.icons.filled.Person
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import moroshkinem.healthylife.ui.components.CircularProgressIndicatorWithLabel
import moroshkinem.healthylife.ui.components.ProgressItem
import moroshkinem.healthylife.ui.components.ProgressRings
import moroshkinem.healthylife.ui.viewmodels.HomeViewModel

@Composable
fun HomeScreen(
    viewModel: HomeViewModel,
    navigateToWater: () -> Unit,
    navigateToStats: () -> Unit,
    navigateToProfile: () -> Unit,
    navigateToMedical:() -> Unit
) {
    val state by viewModel.uiState.collectAsState()
    val steps by viewModel.steps.collectAsState()
    val calories by viewModel.caloriesConsumed.collectAsState()

    val profile by viewModel.profile.collectAsState()

    //val profile by dataStoreManager.profileFlow.collectAsState()
    val caloriesBurned by viewModel.caloriesBurned.collectAsState() // –°–æ–∂–∂—ë–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª—å–Ω–æ

    // ‚úÖ –°–æ–±—Ä–∞—Ç—å medicationProgresses
    val medicationProgresses by viewModel.medicationProgresses.collectAsState()

    val scrollState = rememberScrollState() // ‚úÖ –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    val scrollStateMetrics = rememberScrollState() // ‚úÖ –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏

    val stepsProgress = (steps / profile.dailyStepGoal.toFloat()).coerceIn(0f, 1f)
    val caloriesProgress = (calories / profile.dailyCalorieGoal.toFloat()).coerceIn(0f, 1f)

    Scaffold(
        bottomBar = {
            NavigationBar {
                NavigationBarItem(
                    selected = false,
                    onClick = navigateToProfile,
                    icon = {
                        Icon(
                            imageVector = Icons.Default.Person,
                            contentDescription = "–ü—Ä–æ—Ñ–∏–ª—å"
                        )
                    },
                    label = { Text("–ü—Ä–æ—Ñ–∏–ª—å") }
                )
            }
        }
    ) { padding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(padding)
                .padding(16.dp)
                .verticalScroll(scrollState),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(24.dp)
        ) {
            Text("–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", style = MaterialTheme.typography.headlineMedium)

//            CircularProgressIndicatorWithLabel(
//                progress = state.progress,
//                waterAmount = state.amount,
//                goal = state.goal
//            )
//
//            Row(
//                modifier = Modifier.fillMaxWidth(),
//                horizontalArrangement = Arrangement.SpaceEvenly
//            ) {
//                StatsItem(label = "–®–∞–≥–∏", value = "$steps")
//                StatsItem(label = "–ö–∞–ª–æ—Ä–∏–∏", value = "$calories")
//            }
            // üëâ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–ª–µ—Ü —Å –ø–æ–¥–ø–∏—Å—è–º–∏
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .horizontalScroll(rememberScrollState()),
                horizontalArrangement = Arrangement.spacedBy(24.dp)
            ) {
                ProgressItem(
                    label = "–í–æ–¥–∞",
                    icon = Icons.Default.LocalDrink,
                    progress = state.waterProgress,
                    valueText = "${state.waterAmount} –º–ª",
                    goalText = "${state.waterGoal} –º–ª",
                    color = MaterialTheme.colorScheme.primary
                )
                ProgressItem(
                    label = "–®–∞–≥–∏",
                    icon = Icons.Default.DirectionsWalk,
                    progress = stepsProgress,
                    valueText = steps.toString(),
                    goalText = profile.dailyStepGoal.toString(),
                    color = MaterialTheme.colorScheme.tertiary
                )
                ProgressItem(
                    label = "–ö–∞–ª–æ—Ä–∏–∏",
                    icon = Icons.Default.LocalFireDepartment,
                    progress = caloriesProgress,
                    valueText = state.caloriesConsumed.toString(),
                    goalText = state.calorieGoal.toString(),
                    color = MaterialTheme.colorScheme.secondary
                )
                ProgressItem(
                    label = "–°–æ–Ω",
                    icon = Icons.Default.Hotel,
                    progress = state.sleepProgress,
                    valueText = String.format("%.1f‚ÄØ—á", state.sleepHours),
                    goalText = String.format("%.1f‚ÄØ—á", state.sleepGoal),
                    color = Color(0xFF8B00FF)
                )
            }
            Spacer(Modifier.height(16.dp))

            // –í Row —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞–º–∏
            LazyRow(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                items(medicationProgresses) { progress ->  // ‚úÖ items emit'–∏—Ç composables
                    Column(horizontalAlignment = Alignment.CenterHorizontally) {
                        ProgressItem(
                            label = progress.course.name,
                            icon = Icons.Default.LocalPharmacy,
                            progress = progress.progress,
                            valueText = "${progress.completedDays}",
                            goalText = "${progress.totalDays}",
                            color = if (progress.todayIntake?.isTaken == true) Color.Green else MaterialTheme.colorScheme.error
                        )
                        if (progress.todayIntake?.isTaken == false) {
                            Button(
                                onClick = { viewModel.markMedicationToday(progress.course.id) }
                            ) {
                                Text("–ü—Ä–∏–Ω—è–ª")
                            }
                        }
                    }
                }
            }

            ProgressRings(
                waterProgress = state.waterProgress,
                stepsProgress = stepsProgress,
                caloriesProgress = caloriesProgress,
                sleepProgress = state.sleepProgress      // ‚úÖ –ù–æ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞
            )

            Spacer(Modifier.height(24.dp))

            // –ú–µ—Ç—Ä–∏–∫–∏
            Row(Modifier.fillMaxWidth().horizontalScroll(scrollStateMetrics), horizontalArrangement = Arrangement.SpaceEvenly) {
                // –í–æ–¥–∞
                StatsItem("–í–æ–¥–∞", "${state.waterAmount}/${state.waterGoal} –º–ª")
                Spacer(Modifier.width(24.dp))
                StatsItem("–ö–∞–ª–æ—Ä–∏–∏", "${state.caloriesConsumed - caloriesBurned}/${state.calorieGoal}")
                Spacer(Modifier.width(24.dp))
                // –®–∞–≥–∏
                StatsItem("–®–∞–≥–∏", "$steps/${profile.dailyStepGoal}")
                Spacer(Modifier.width(24.dp))
                // –ö–∞–ª–æ—Ä–∏–∏
                StatsItem("–ï–¥–∞/–°–æ–∂.", "${state.caloriesConsumed}/${state.calorieGoal} –∫–∞–ª")
                Spacer(Modifier.width(24.dp))
                // –°–æ–Ω
                StatsItem("–°–æ–Ω", String.format("%.1f / %.1f —á", state.sleepHours, state.sleepGoal))
            }
            Button(onClick = navigateToWater) {
                Text("–î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É")
            }

            OutlinedButton(onClick = navigateToStats) {
                Text("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
            }

            Button(
                onClick = viewModel::resetTodayStats,
                colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.error)
            ) {
                Text("–°–ë–†–û–° –°–¢–ê–¢–ò–°–¢–ò–ö–ò (DEBUG)")
            }
            Button(onClick = navigateToMedical) {
                Text("–î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å —Ç–∞–±–ª–µ—Ç–æ–∫")
            }
        }
    }
}

@Composable
private fun StatsItem(label: String, value: String) {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(text = value, fontSize = 20.sp, fontWeight = FontWeight.Bold)
        Text(text = label, color = MaterialTheme.colorScheme.onSurfaceVariant)
    }
}